{"version":3,"sources":["styles/сustom.ts","components/todoItem/todoItem.tsx","mst/index.ts","app.tsx","mst/setup.ts","reportWebVitals.ts","index.tsx"],"names":["mainColor","TextInput","styled","input","MainContainer","div","ItemContainer","Form","form","Button","button","ItemWrapper","CheckedItem","props","checked","CheckBoxInput","TodoItem","inject","observer","rootTree","React","newLabel","setNewLabel","filtredItems","todos","filter","item","labelNote","toLowerCase","indexOf","onSubmit","event","preventDefault","newTask","value","onChange","e","newInputLabel","target","type","map","id","done","onClick","toggle","onItemClickHandler","RootModel","types","model","identifier","string","boolean","ListModel","array","actions","self","uuidv4","applySnapshot","forEach","App","create","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8wCAMA,IAAMA,EAAY,OAELC,EAAYC,IAAOC,MAAV,IAEAH,GAITI,EAAgBF,IAAOG,IAAV,KAQbC,EAAgBJ,IAAOG,IAAV,KAMbE,EAAOL,IAAOM,KAAV,KAKJC,EAASP,IAAOQ,OAAV,IAEGV,EAEXA,GAIEW,EAAcT,IAAOG,IAAV,IAIbL,GAGEY,EAAcV,YAAOS,EAAPT,CAAH,KACF,SAACW,GAAD,OAClBA,EAAMC,QAAU,UAAY,iBAGnBC,EAAgBb,IAAOC,MAAV,KCjCpBa,EAAWC,YAAO,WAAPA,CACfC,aAAS,SAACL,GAAsB,IACtBM,EAAaN,EAAbM,SADqB,EAEGC,WAAe,IAFlB,mBAEtBC,EAFsB,KAEZC,EAFY,KAG7B,IAAKH,EAAU,OAAO,KACtB,IAYMI,EAAeJ,EAASK,MAAMC,QAClC,SAACC,GAAD,OACEA,EAAKC,UAAUC,cAAcC,QAAQR,EAASO,gBAAkB,KAOpE,OACE,cAACxB,EAAD,UACE,eAACE,EAAD,WACE,eAACC,EAAD,CAAMuB,SAnBK,SAACC,GAEhB,GADAA,EAAMC,kBACDb,EAAU,OAAO,KACtBA,EAASc,QAAQZ,GACjBC,EAAY,KAeR,UACE,cAACrB,EAAD,CACEiC,MAAOb,EACPc,SA3BgB,SAACC,GACzB,IAAMC,EAAgBD,EAAEE,OAAOJ,MAC/BZ,EAAYe,IA0BJE,KAAK,SAEP,cAAC9B,EAAD,kEAGDc,EAAaiB,KAAI,SAACd,GAAU,IACnBe,EAAwBf,EAAxBe,GAAId,EAAoBD,EAApBC,UAAWe,EAAShB,EAATgB,KACvB,OACE,eAAC9B,EAAD,CAAaE,QAAS4B,EAAtB,UACE,cAAC3B,EAAD,CACE4B,QAAS,kBArBI,SAACF,GAC1BtB,EAASyB,OAAOH,GAoBWI,CAAmBJ,IAClCF,KAAK,aAENZ,IAL8Bc,e,+BC1DzCK,EAAYC,IAAMC,MAAM,QAAS,CACrCP,GAAIM,IAAME,WACVtB,UAAWoB,IAAMG,OACjBR,KAAMK,IAAMI,UAGRC,EAAYL,IACfC,MAAM,OAAQ,CACbxB,MAAOuB,IAAMM,MAAMP,KAEpBQ,SAAQ,SAACC,GAQR,MAAO,CAAEtB,QAPO,SAACN,GACf,IAAMc,EAAKe,cACXC,YAAcF,EAAD,YAAC,eACTA,GADQ,IAEX/B,MAAM,GAAD,mBAAM+B,EAAK/B,OAAX,CAAkB,CAAEiB,KAAId,YAAWe,MAAM,aAKnDY,SAAQ,SAACC,GAAD,MAAW,CAClBX,OADkB,SACXH,GACLc,EAAK/B,MAAMkC,SAAQ,SAAChC,GACde,IAAOf,EAAKe,KAAIf,EAAKgB,MAAQhB,EAAKgB,cCX/BiB,EAVO,WAAO,IACnBxC,ECMD,CAAEA,SATQiC,EAAUQ,OAAO,CAChCpC,MAAO,CACL,CACEiB,GAAI,IACJd,UAAW,gEACXe,MAAM,ODFJvB,SACR,OAAKA,EAEH,cAAC,IAAD,CAAUA,SAAUA,EAApB,SACE,cAACH,EAAD,MAHkB,MEOT6C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.438aa64a.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\ntype CheckibleItemType = {\r\n  checked: any;\r\n};\r\n\r\nconst mainColor = \"blue\";\r\n\r\nexport const TextInput = styled.input`\r\n  padding: 5px;\r\n  border: 2px solid ${mainColor};\r\n  margin-right: 20px;\r\n`;\r\n\r\nexport const MainContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-top: 20px;\r\n  margin: 10px;\r\n`;\r\n\r\nexport const ItemContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: start;\r\n`;\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  margin: 50px 0 50px 0;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  padding: 5px;\r\n  border: 2px solid ${mainColor};\r\n  border-radius: 3px;\r\n  color: ${mainColor};\r\n  background-color: Transparent;\r\n`;\r\n\r\nexport const ItemWrapper = styled.div`\r\n  display: flex;\r\n  margin: 0 0 10px 0;\r\n  align-items: center;\r\n  color: ${mainColor};\r\n`;\r\n\r\nexport const CheckedItem = styled(ItemWrapper)`\r\n  background-color: ${(props: CheckibleItemType) =>\r\n    props.checked ? \"#F3FFD5\" : \"Transparent\"};\r\n`;\r\n\r\nexport const CheckBoxInput = styled.input`\r\n  margin: 0 10px -2px 0;\r\n`;\r\n","import { inject, observer } from \"mobx-react\";\r\nimport * as React from \"react\";\r\nimport { ListModelType } from \"../../mst\";\r\nimport {\r\n  MainContainer,\r\n  ItemContainer,\r\n  Form,\r\n  TextInput,\r\n  Button,\r\n  CheckedItem,\r\n  CheckBoxInput,\r\n} from \"../../styles/сustom\";\r\n\r\ntype PropTypes = {\r\n  rootTree?: ListModelType;\r\n};\r\n\r\ntype InputEvent = React.ChangeEvent<HTMLInputElement>;\r\ntype ButtonEvent = React.FormEvent<HTMLFormElement>;\r\n\r\nconst TodoItem = inject(\"rootTree\")(\r\n  observer((props: PropTypes) => {\r\n    const { rootTree } = props;\r\n    const [newLabel, setNewLabel] = React.useState(\"\");\r\n    if (!rootTree) return null;\r\n    const inputLabelHandler = (e: InputEvent) => {\r\n      const newInputLabel = e.target.value;\r\n      setNewLabel(newInputLabel);\r\n    };\r\n\r\n    const onSubmit = (event: ButtonEvent) => {\r\n      event.preventDefault();\r\n      if (!rootTree) return null;\r\n      rootTree.newTask(newLabel);\r\n      setNewLabel(\"\");\r\n    };\r\n\r\n    const filtredItems = rootTree.todos.filter(\r\n      (item) =>\r\n        item.labelNote.toLowerCase().indexOf(newLabel.toLowerCase()) > -1\r\n    );\r\n\r\n    const onItemClickHandler = (id: string) => {\r\n      rootTree.toggle(id);\r\n    };\r\n\r\n    return (\r\n      <MainContainer>\r\n        <ItemContainer>\r\n          <Form onSubmit={onSubmit}>\r\n            <TextInput\r\n              value={newLabel}\r\n              onChange={inputLabelHandler}\r\n              type=\"text\"\r\n            />\r\n            <Button>Добавить</Button>\r\n          </Form>\r\n\r\n          {filtredItems.map((item) => {\r\n            const { id, labelNote, done } = item;\r\n            return (\r\n              <CheckedItem checked={done} key={id}>\r\n                <CheckBoxInput\r\n                  onClick={() => onItemClickHandler(id)}\r\n                  type=\"checkbox\"\r\n                />\r\n                {labelNote}\r\n              </CheckedItem>\r\n            );\r\n          })}\r\n        </ItemContainer>\r\n      </MainContainer>\r\n    );\r\n  })\r\n);\r\n\r\nexport { TodoItem };\r\n","import { applySnapshot, Instance, types } from \"mobx-state-tree\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst RootModel = types.model(\"Notes\", {\r\n  id: types.identifier,\r\n  labelNote: types.string,\r\n  done: types.boolean,\r\n});\r\n\r\nconst ListModel = types\r\n  .model(\"List\", {\r\n    todos: types.array(RootModel),\r\n  })\r\n  .actions((self) => {\r\n    const newTask = (labelNote: string) => {\r\n      const id = uuidv4();\r\n      applySnapshot(self, {\r\n        ...self,\r\n        todos: [...self.todos, { id, labelNote, done: false }],\r\n      });\r\n    };\r\n    return { newTask };\r\n  })\r\n  .actions((self) => ({\r\n    toggle(id: string) {\r\n      self.todos.forEach((item) => {\r\n        if (id === item.id) item.done = !item.done;\r\n      });\r\n    },\r\n  }));\r\n\r\nexport { ListModel };\r\n\r\nexport type ListModelType = Instance<typeof ListModel>;\r\nexport type RootModelType = Instance<typeof RootModel>;\r\n","import { Provider } from \"mobx-react\";\nimport React from \"react\";\nimport { TodoItem } from \"./components/todoItem/todoItem\";\nimport { setupRootStore } from \"./mst/setup\";\n\nconst App: React.FC = () => {\n  const { rootTree } = setupRootStore();\n  if (!rootTree) return null;\n  return (\n    <Provider rootTree={rootTree}>\n      <TodoItem />\n    </Provider>\n  );\n};\n\nexport default App;\n","import { ListModel } from \".\";\r\n\r\nexport const setupRootStore = () => {\r\n  const rootTree = ListModel.create({\r\n    todos: [\r\n      {\r\n        id: \"1\",\r\n        labelNote: \"купить кофе\",\r\n        done: false,\r\n      },\r\n    ],\r\n  });\r\n  return { rootTree };\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}